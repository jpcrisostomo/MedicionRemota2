#include <Arduino.h>
#include <WiFi.h>
#include <HTTPClient.h>
#include <Update.h>

#define FWURL "http://192.168.100.100/public/firmware/myprogram_v" //software will add the version and .bin at the end,
#define FWversion 3

int totalLength;       //total size of firmware
int currentLength = 0; //current size of written firmware

void updateFirmware(uint8_t *data, size_t len);
void checkupdate();


void checkupdate(){

  HTTPClient client;
  Serial.println("Checking if new firmware is available.");
  int fwNewVersion = FWversion+1; //cerca la versione successiva del firmware.
  String fwVersionURL = FWURL + String(fwNewVersion) + ".bin";
   
  client.begin("http://192.168.100.100/firmware/");

  int resp = client.GET();
  Serial.print("Response: ");
  Serial.println(resp);
  // If reachable, start downloading
  if(resp == 200){
      // get length of document (is -1 when Server sends no Content-Length header)
      totalLength = client.getSize();
      // transfer to local variable
      int len = totalLength;
      // this is required to start firmware update process
      Update.begin(UPDATE_SIZE_UNKNOWN);
      Serial.printf("FW Size: %u\n",totalLength);
      // create buffer for read
      uint8_t buff[128] = { 0 };
      // get tcp stream
      WiFiClient * stream = client.getStreamPtr();
      // read all data from server
      Serial.println("Updating firmware...");
      while(client.connected() && (len > 0 || len == -1)) {
           // get available data size
           size_t size = stream->available();
           if(size) {
              // read up to 128 byte
              int c = stream->readBytes(buff, ((size > sizeof(buff)) ? sizeof(buff) : size));
              // pass to function
              updateFirmware(buff, c);
              if(len > 0) {
                 len -= c;
              }
           }
           delay(1);
      }
  }else{
    Serial.println("Cannot download firmware file.");
  }
  client.end();
}

//----------------------------------------------------------------------------------------------------------------------
// Function to update firmware incrementally
// Buffer is declared to be 128 so chunks of 128 bytes
// from firmware is written to device until server closes

void updateFirmware(uint8_t *data, size_t len){
  Update.write(data, len);
  currentLength += len;
  // Print dots while waiting for update to finish
  //Serial.print('.');
  // if current length of written firmware is not equal to total firmware size, repeat
  if(currentLength != totalLength) return;
  Update.end(true);
  Serial.printf("\nUpdate Success, Total Size: %u\nRebooting...\n", currentLength);
  // Restart ESP32 to see changes 
  ESP.restart();
}